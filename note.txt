1. Tela de Login
‚ö†Ô∏è Observa√ß√µes:

üìÅ Para os testes passarem, o componente deve ser chamado de Login.tsx ou Login/index.tsx.
üîó A rota usada para essa tela deve ser /.
2. Crie todos os elementos que devem respeitar os atributos descritos no prot√≥tipo para a tela de login
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O input de e-mail deve ter o atributo data-testid="email-input".
O input de senha deve ter o atributo data-testid="password-input".
O bot√£o de login deve ter o atributo data-testid="login-submit-btn".
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
Se est√£o corretos os data-testids email-input, password-input e login-submit-btn.
</details><br />
3. Desenvolva a tela de maneira que a pessoa consiga escrever seu e-mail no input de email e sua senha no input de senha
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
A possibilidade de escrever o e-mail no input de e-mail.
A possibilidade de escrever a senha no input de senha.
</details><br />
4. Desenvolva a tela de maneira que o formul√°rio s√≥ seja v√°lido ap√≥s o preenchimento de um e-mail v√°lido e de uma senha com mais de 6 caracteres
Este requisito tamb√©m inclui testes de cobertura da p√°gina Login.tsx.

<br /><details>

<summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O formul√°rio s√≥ fica v√°lido ap√≥s um e-mail v√°lido e uma senha com mais de 6 caracteres serem preenchidos.
Caso o formul√°rio esteja inv√°lido, o bot√£o de submeter deve estar desativado, contendo a propriedade disabled.
Caso o formul√°rio esteja v√°lido, o bot√£o de submeter deve estar ativado, n√£o contendo a propriedade disabled.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O bot√£o deve estar desativado se o e-mail for inv√°lido.
O bot√£o deve estar desativado se a senha tiver 6 caracteres ou menos.
O bot√£o deve estar ativado se o e-mail e a senha forem v√°lidos.
Deve haver cobertura de 45% da tela de login.
</details><br />
5. Autentica√ß√£o de Usu√°rio (JWT)
1. Crie um servi√ßo authService.ts para lidar com a autentica√ß√£o
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O servi√ßo deve conter m√©todos para login e verifica√ß√£o do token.
O m√©todo de login deve enviar as credenciais para a API e receber o token JWT.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O servi√ßo deve retornar o token JWT ap√≥s a autentica√ß√£o bem-sucedida.
</details><br />
2. Implemente a l√≥gica de autentica√ß√£o no componente Login.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O componente deve chamar o servi√ßo de autentica√ß√£o e salvar o token no localStorage.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O token deve ser salvo no localStorage ap√≥s a autentica√ß√£o.
</details><br />
6. Prote√ß√£o de Rotas (AuthGuard)
1. Crie um componente AuthGuard.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O componente deve verificar se o token JWT est√° presente no localStorage.
Se o token n√£o estiver presente, redirecionar para a tela de login.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
A prote√ß√£o de rotas deve funcionar corretamente, redirecionando usu√°rios n√£o autenticados para a tela de login.
</details><br />
7. Dashboard Principal
1. Crie o componente Dashboard.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O componente deve exibir estat√≠sticas como n√∫mero de pacientes e consultas agendadas.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
As estat√≠sticas devem ser exibidas corretamente na tela do dashboard.
</details><br />
8. CRUD de Pacientes
1. Crie o componente Patients.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O componente deve listar todos os pacientes cadastrados.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
Os pacientes devem ser exibidos corretamente na lista.
</details><br />
2. Crie os componentes CreatePatient.tsx e EditPatient.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
CreatePatient.tsx deve conter um formul√°rio para adicionar um novo paciente.
EditPatient.tsx deve permitir editar as informa√ß√µes de um paciente existente.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O formul√°rio de cria√ß√£o deve permitir adicionar um novo paciente corretamente.
O formul√°rio de edi√ß√£o deve permitir atualizar as informa√ß√µes do paciente.
</details><br />
3. Crie o arquivo de estilo Patients.css
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O arquivo deve conter estilos para o componente de pacientes.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
Os estilos devem ser aplicados corretamente aos componentes de pacientes.
</details><br />
9. CRUD de M√©dicos (Restrito a Administradores)
1. Crie o componente Doctors.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O componente deve listar todos os m√©dicos cadastrados.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
Os m√©dicos devem ser exibidos corretamente na lista.
</details><br />
2. Crie os componentes CreateDoctor.tsx e EditDoctor.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
CreateDoctor.tsx deve conter um formul√°rio para adicionar um novo m√©dico.
EditDoctor.tsx deve permitir editar as informa√ß√µes de um m√©dico existente.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O formul√°rio de cria√ß√£o deve permitir adicionar um novo m√©dico corretamente.
O formul√°rio de edi√ß√£o deve permitir atualizar as informa√ß√µes do m√©dico.
</details><br />
3. Crie o arquivo de estilo Doctors.css
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O arquivo deve conter estilos para o componente de m√©dicos.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
Os estilos devem ser aplicados corretamente aos componentes de m√©dicos.
</details><br />
10. Gest√£o de Consultas
1. Crie o componente Appointments.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O componente deve listar todas as consultas agendadas.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
As consultas devem ser exibidas corretamente na lista.
</details><br />
2. Crie os componentes CreateAppointment.tsx e EditAppointment.tsx
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
CreateAppointment.tsx deve conter um formul√°rio para adicionar uma nova consulta.
EditAppointment.tsx deve permitir editar as informa√ß√µes de uma consulta existente.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O formul√°rio de cria√ß√£o deve permitir adicionar uma nova consulta corretamente.
O formul√°rio de edi√ß√£o deve permitir atualizar as informa√ß√µes da consulta.
</details><br />
3. Crie o arquivo de estilo Appointments.css
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O arquivo deve conter estilos para o componente de consultas.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
Os estilos devem ser aplicados corretamente aos componentes de consultas.
</details><br />
11. Implementar o PrimeReact
1. Configure o uso do PrimeReact
<details> <summary><strong>Observa√ß√µes t√©cnicas</strong></summary>
O PrimeReact deve ser instalado e configurado corretamente no projeto.
</details>
<br /><details>

<summary><strong>O que ser√° verificado</strong></summary>
O PrimeReact